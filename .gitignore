###################################################################
# This file is part of the React project
###################################################################

# dependencies
**/node_modules

# production
/build

# misc
.DS_Store
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# editor settings
.vscode/
.idea/
*.swp

# testing
/coverage

# optional runtime data
*.log

# local tools
*.local

###################################################################
# This file is part of the Terraform project
###################################################################
# Lambda zip files
*.zip

# Local .terraform directories
**/.terraform/*
.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# to-do
todo.txt

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# tfvars files are used to pass variables to Terraform configurations. If you have
*.tfvars

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*
